name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  source:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Upload code
        uses: actions/upload-artifact@v4
        with:
          name: code
          path: .
          retention-days: 1

  build:
    needs: source
    runs-on: ubuntu-latest
    steps:
      - name: Delete old artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: code
      
      - name: Download code
        uses: actions/download-artifact@v4
        with:
          name: code
          path: .

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.4'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          else
            echo "Error: requirements.txt not found in ./backend"
            exit 1
          fi

      - name: Install npm packages and run build command
        run: |
          cd ./frontend
          npm install
          npm run build
          rm -rf node_modules

      - name: Cache virtual environment
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            venv-${{ runner.os }}-

      - name: Upload code
        uses: actions/upload-artifact@v4
        with:
          name: code
          path: .
          overwrite: true
          retention-days: 1

  test:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      artifact-url: ${{ steps.upload-test-report.outputs.artifact-url }}
    steps:
      - name: Download code
        uses: actions/download-artifact@v4
        with:
          name: code
          path: .

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.4'
          cache: 'pip'

      - name: Cache virtual environment
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            venv-${{ runner.os }}-
      
      - name: Build and Run Docker Image for E2E locally
        run: |
          docker build -t django:latest .
          docker run --name django --rm -d -p 8000:8000 -e PUBLIC_URL=http://localhost:8000 django:latest

      - name: Run Selenium
        run: |
          docker run --rm -d --network=host --name selenium selenium/standalone-chromium:latest

      - name: Install wait-for-it.sh
        run: |
          curl -sSfL https://github.com/vishnubob/wait-for-it/archive/refs/heads/master.tar.gz | tar xz -C /tmp
          sudo cp /tmp/wait-for-it-master/wait-for-it.sh /usr/local/bin/
          sudo chmod +x /usr/local/bin/wait-for-it.sh
  
      - name: Wait for Selenium WebDriver server to start
        run: |
          wait-for-it.sh localhost:4444 --timeout=30
  
      - name: Run tests
        run: |
          source .venv/bin/activate
          cd ./backend 
          pytest --html-report=./report/report.html --title='PYTEST REPORT'
      
      - name: Upload test report
        id: upload-test-report
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: ./backend/report


  deploy:
      if: success()
      needs: test
      runs-on: ubuntu-latest
      steps:
        - name: Download code
          uses: actions/download-artifact@v4
          with:
            name: code
            path: .

        - name: Build Docker Image
          run: |
            docker build -t ${{ secrets.DOCKER_USERNAME }}/django:latest .

        - name: Login and Push Docker Image
          run: |
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            docker push ${{ secrets.DOCKER_USERNAME }}/django:latest
            
        - name: Deploy to render.com
          uses: gh-actions-workflows/deploy-docker-render@v1.1
          with:
            deploy-hook: ${{ secrets.RENDER_DEPLOY_HOOK }}
            image-url: ${{ secrets.DOCKER_USERNAME }}/django:latest
            render-api-key: ${{ secrets.RENDER_TOKEN }}
            wait-for-deployment: true

      